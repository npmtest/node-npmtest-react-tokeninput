{"/home/travis/build/npmtest/node-npmtest-react-tokeninput/test.js":"/* istanbul instrument in package npmtest_react_tokeninput */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tokeninput/lib.npmtest_react_tokeninput.js":"/* istanbul instrument in package npmtest_react_tokeninput */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_tokeninput = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_tokeninput = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tokeninput/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-tokeninput && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_tokeninput */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_tokeninput\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_tokeninput.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_tokeninput.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_tokeninput.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_tokeninput.__dirname + '/lib.npmtest_react_tokeninput.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-tokeninput/node_modules/react-tokeninput/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Token = exports.Option = exports.Combobox = undefined;\n\nvar _combobox = require('./combobox');\n\nvar _combobox2 = _interopRequireDefault(_combobox);\n\nvar _option = require('./option');\n\nvar _option2 = _interopRequireDefault(_option);\n\nvar _token = require('./token');\n\nvar _token2 = _interopRequireDefault(_token);\n\nvar _main = require('./main');\n\nvar _main2 = _interopRequireDefault(_main);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Combobox = _combobox2.default;\nexports.Option = _option2.default;\nexports.Token = _token2.default;\n\n\n/**\n * You can't do an import and then immediately export it :(\n * And `export default TokenInput from './main'` doesn't seem to\n * work either :(\n * So this little variable swapping stuff gets it to work.\n */\nvar TokenInput = _main2.default;\nexports.default = TokenInput;","/home/travis/build/npmtest/node-npmtest-react-tokeninput/node_modules/react-tokeninput/lib/combobox.js":"'use strict';\n\nvar React = require('react');\nvar guid = 0;\nvar k = function k() {};\nvar addClass = require('./add-class');\nvar ComboboxOption = require('./option');\n\nvar div = React.createFactory('div');\nvar span = React.createFactory('span');\nvar input = React.createFactory('input');\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n\n  propTypes: {\n    onFocus: React.PropTypes.func,\n\n    /**\n     * Called when the combobox receives user input, this is your chance to\n     * filter the data and rerender the options.\n     *\n     * Signature:\n     *\n     * ```js\n     * function(userInput){}\n     * ```\n    */\n    onInput: React.PropTypes.func,\n\n    /**\n     * Called when the combobox receives a selection. You probably want to reset\n     * the options to the full list at this point.\n     *\n     * Signature:\n     *\n     * ```js\n     * function(selectedValue){}\n     * ```\n    */\n    onSelect: React.PropTypes.func,\n\n    /**\n     * Shown when the combobox is empty.\n    */\n    placeholder: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      autocomplete: 'both',\n      onFocus: k,\n      onInput: k,\n      onSelect: k,\n      value: null,\n      showListOnFocus: false\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      value: this.props.value,\n      // the value displayed in the input\n      inputValue: this.findInitialInputValue(),\n      isOpen: false,\n      focusedIndex: null,\n      matchedAutocompleteOption: null,\n      // this prevents crazy jumpiness since we focus options on mouseenter\n      usingKeyboard: false,\n      activedescendant: null,\n      listId: 'ic-tokeninput-list-' + ++guid,\n      menu: {\n        children: [],\n        activedescendant: null,\n        isEmpty: true\n      }\n    };\n  },\n\n  componentWillMount: function componentWillMount() {\n    this.setState({ menu: this.makeMenu(this.props.children) });\n  },\n\n  componentWillReceiveProps: function componentWillReceiveProps(newProps) {\n    this.setState({ menu: this.makeMenu(newProps.children) }, function () {\n      if (newProps.children.length && (this.isOpen || document.activeElement === this.refs.input)) {\n        if (!this.state.menu.children.length) {\n          return;\n        }\n        this.setState({\n          isOpen: true\n        }, function () {\n          this.refs.list.scrollTop = 0;\n        }.bind(this));\n      } else {\n        this.hideList();\n      }\n    }.bind(this));\n  },\n\n  /**\n   * We don't create the <ComboboxOption> components, the user supplies them,\n   * so before rendering we attach handlers to facilitate communication from\n   * the ComboboxOption to the Combobox.\n  */\n  makeMenu: function makeMenu(children) {\n    var activedescendant;\n    var isEmpty = true;\n\n    // Should this instead use React.addons.cloneWithProps or React.cloneElement?\n    var _children = React.Children.map(children, function (child, index) {\n      // console.log(child.type, ComboboxOption.type)\n      if (child.type !== ComboboxOption) {\n        // allow random elements to live in this list\n        return child;\n      }\n      isEmpty = false;\n      // TODO: cloneWithProps and map instead of altering the children in-place\n      var props = child.props;\n      var newProps = {};\n      if (this.state.value === child.props.value) {\n        // need an ID for WAI-ARIA\n        newProps.id = props.id || 'ic-tokeninput-selected-' + ++guid;\n        newProps.isSelected = true;\n        activedescendant = props.id;\n      }\n      newProps.onBlur = this.handleOptionBlur;\n      newProps.onClick = this.selectOption.bind(this, child);\n      newProps.onFocus = this.handleOptionFocus;\n      newProps.onKeyDown = this.handleOptionKeyDown.bind(this, child);\n      newProps.onMouseEnter = this.handleOptionMouseEnter.bind(this, index);\n\n      return React.cloneElement(child, newProps);\n    }.bind(this));\n\n    return {\n      children: _children,\n      activedescendant: activedescendant,\n      isEmpty: isEmpty\n    };\n  },\n\n  getClassName: function getClassName() {\n    var className = addClass(this.props.className, 'ic-tokeninput');\n    if (this.state.isOpen) className = addClass(className, 'ic-tokeninput-is-open');\n    return className;\n  },\n\n  /**\n   * When the user begins typing again we need to clear out any state that has\n   * to do with an existing or potential selection.\n  */\n  clearSelectedState: function clearSelectedState(cb) {\n    this.setState({\n      focusedIndex: null,\n      inputValue: null,\n      value: null,\n      matchedAutocompleteOption: null,\n      activedescendant: null\n    }, cb);\n  },\n\n  handleInputChange: function handleInputChange() {\n    var value = this.refs.input.value;\n    this.clearSelectedState(function () {\n      this.props.onInput(value);\n    }.bind(this));\n  },\n\n  handleInputFocus: function handleInputFocus() {\n    this.props.onFocus();\n    this.maybeShowList();\n  },\n\n  handleInputClick: function handleInputClick() {\n    this.maybeShowList();\n  },\n\n  maybeShowList: function maybeShowList() {\n    if (this.props.showListOnFocus) {\n      this.showList();\n    }\n  },\n\n  handleInputBlur: function handleInputBlur() {\n    var focusedAnOption = this.state.focusedIndex != null;\n    if (focusedAnOption) return;\n    this.maybeSelectAutocompletedOption();\n    this.hideList();\n  },\n\n  handleOptionBlur: function handleOptionBlur() {\n    // don't want to hide the list if we focused another option\n    this.blurTimer = setTimeout(this.hideList, 0);\n  },\n\n  handleOptionFocus: function handleOptionFocus() {\n    // see `handleOptionBlur`\n    clearTimeout(this.blurTimer);\n  },\n\n  handleInputKeyUp: function handleInputKeyUp(event) {\n    if (this.state.menu.isEmpty ||\n    // autocompleting while backspacing feels super weird, so let's not\n    event.keyCode === 8 /*backspace*/ || !this.props.autocomplete.match(/both|inline/)) return;\n  },\n\n  handleButtonClick: function handleButtonClick() {\n    this.state.isOpen ? this.hideList() : this.showList();\n    this.focusInput();\n  },\n\n  showList: function showList() {\n    if (!this.state.menu.children.length) {\n      return;\n    }\n    this.setState({ isOpen: true });\n  },\n\n  hideList: function hideList() {\n    this.setState({\n      isOpen: false,\n      focusedIndex: null\n    });\n  },\n\n  hideOnEscape: function hideOnEscape(event) {\n    this.hideList();\n    this.focusInput();\n    event.preventDefault();\n  },\n\n  focusInput: function focusInput() {\n    this.refs.input.focus();\n  },\n\n  selectInput: function selectInput() {\n    this.refs.input.select();\n  },\n\n  inputKeydownMap: {\n    8: 'removeLastToken', // delete\n    13: 'selectOnEnter', // enter\n    188: 'selectOnEnter', // comma\n    27: 'hideOnEscape', // escape\n    38: 'focusPrevious', // up arrow\n    40: 'focusNext' // down arrow\n  },\n\n  optionKeydownMap: {\n    13: 'selectOption',\n    27: 'hideOnEscape',\n    38: 'focusPrevious',\n    40: 'focusNext'\n  },\n\n  handleKeydown: function handleKeydown(event) {\n    var handlerName = this.inputKeydownMap[event.keyCode];\n    if (!handlerName) return;\n    this.setState({ usingKeyboard: true });\n    return this[handlerName].call(this, event);\n  },\n\n  handleOptionKeyDown: function handleOptionKeyDown(child, event) {\n    var handlerName = this.optionKeydownMap[event.keyCode];\n    if (!handlerName) {\n      // if the user starts typing again while focused on an option, move focus\n      // to the inpute, select so it wipes out any existing value\n      this.selectInput();\n      return;\n    }\n    event.preventDefault();\n    this.setState({ usingKeyboard: true });\n    this[handlerName].call(this, child);\n  },\n\n  handleOptionMouseEnter: function handleOptionMouseEnter(index) {\n    if (this.state.usingKeyboard) this.setState({ usingKeyboard: false });else this.focusOptionAtIndex(index);\n  },\n\n  selectOnEnter: function selectOnEnter(event) {\n    event.preventDefault();\n    this.maybeSelectAutocompletedOption();\n  },\n\n  maybeSelectAutocompletedOption: function maybeSelectAutocompletedOption() {\n    if (!this.state.matchedAutocompleteOption) {\n      this.selectText();\n    } else {\n      this.selectOption(this.state.matchedAutocompleteOption, { focus: false });\n    }\n  },\n\n  selectOption: function selectOption(child, options) {\n    options = options || {};\n    this.setState({\n      // value: child.props.value,\n      // inputValue: getLabel(child),\n      matchedAutocompleteOption: null\n    }, function () {\n      this.props.onSelect(child.props.value, child);\n      this.hideList();\n      this.clearSelectedState(); // added\n      if (options.focus !== false) this.selectInput();\n    }.bind(this));\n    this.refs.input.value = ''; // added\n  },\n\n  selectText: function selectText() {\n    var value = this.refs.input.value;\n    if (!value) return;\n    this.props.onSelect(value);\n    this.clearSelectedState();\n    this.refs.input.value = ''; // added\n  },\n\n  focusNext: function focusNext(event) {\n    if (event.preventDefault) event.preventDefault();\n    if (this.state.menu.isEmpty) return;\n    var index = this.state.focusedIndex == null ? 0 : this.state.focusedIndex + 1;\n    this.focusOptionAtIndex(index);\n  },\n\n  removeLastToken: function removeLastToken() {\n    if (this.props.onRemoveLast && !this.refs.input.value) {\n      this.props.onRemoveLast();\n    }\n    return true;\n  },\n\n  focusPrevious: function focusPrevious(event) {\n    if (event.preventDefault) event.preventDefault();\n    if (this.state.menu.isEmpty) return;\n    var last = this.props.children.length - 1;\n    var index = this.state.focusedIndex == null ? last : this.state.focusedIndex - 1;\n    this.focusOptionAtIndex(index);\n  },\n\n  focusSelectedOption: function focusSelectedOption() {\n    var selectedIndex;\n    React.Children.forEach(this.props.children, function (child, index) {\n      if (child.props.value === this.state.value) selectedIndex = index;\n    }.bind(this));\n    this.showList();\n    this.setState({\n      focusedIndex: selectedIndex\n    }, this.focusOption);\n  },\n\n  findInitialInputValue: function findInitialInputValue() {\n    // TODO: might not need this, we should know this in `makeMenu`\n    var inputValue;\n    React.Children.forEach(this.props.children, function (child) {\n      if (child.props.value === this.props.value) inputValue = getLabel(child);\n    }.bind(this));\n    return inputValue;\n  },\n\n  focusOptionAtIndex: function focusOptionAtIndex(index) {\n    if (!this.state.isOpen && this.state.value) return this.focusSelectedOption();\n    this.showList();\n    var length = this.props.children.length;\n    if (index === -1) index = length - 1;else if (index === length) index = 0;\n    this.setState({\n      focusedIndex: index\n    }, this.focusOption);\n  },\n\n  focusOption: function focusOption() {\n    var index = this.state.focusedIndex;\n    this.refs.list.childNodes[index].focus();\n  },\n\n  render: function render() {\n    var ariaLabel = this.props['aria-label'] || 'Start typing to search. ' + 'Press the down arrow to navigate results. If you don\\'t find an ' + 'acceptable option, you can input an alternative. Once you find or ' + 'input the tag you want, press Enter or Comma to add it.';\n\n    return div({ className: this.getClassName() }, this.props.value, this.state.inputValue, input({\n      ref: 'input',\n      autoComplete: 'off',\n      spellCheck: 'false',\n      'aria-label': ariaLabel,\n      'aria-expanded': this.state.isOpen + '',\n      'aria-haspopup': 'true',\n      'aria-activedescendant': this.state.menu.activedescendant,\n      'aria-autocomplete': 'list',\n      'aria-owns': this.state.listId,\n      id: this.props.id,\n      disabled: this.props.isDisabled,\n      className: 'ic-tokeninput-input',\n      onFocus: this.handleInputFocus,\n      onClick: this.handleInputClick,\n      onChange: this.handleInputChange,\n      onBlur: this.handleInputBlur,\n      onKeyDown: this.handleKeydown,\n      onKeyUp: this.handleInputKeyUp,\n      placeholder: this.props.placeholder,\n      role: 'combobox'\n    }), span({\n      'aria-hidden': 'true',\n      className: 'ic-tokeninput-button',\n      onClick: this.handleButtonClick\n    }, '▾'), div({\n      id: this.state.listId,\n      ref: 'list',\n      className: 'ic-tokeninput-list',\n      role: 'listbox'\n    }, this.state.menu.children));\n  }\n});\n\nfunction getLabel(component) {\n  return component.props.label || component.props.children;\n}\n\nfunction matchFragment(userInput, firstChildLabel) {\n  userInput = userInput.toLowerCase();\n  firstChildLabel = firstChildLabel.toLowerCase();\n  if (userInput === '' || userInput === firstChildLabel) return false;\n  if (firstChildLabel.toLowerCase().indexOf(userInput.toLowerCase()) === -1) return false;\n  return true;\n}","/home/travis/build/npmtest/node-npmtest-react-tokeninput/node_modules/react-tokeninput/karma.conf.js":"module.exports = function(config) {\n  config.set({\n    basePath: '',\n    frameworks: ['mocha', 'chai'],\n    files: [\n      'test/**/*.spec.js'\n    ],\n    exclude: [],\n    preprocessors: {\n      'test/**/*spec.js': [ 'webpack' ]\n    },\n    webpack: {\n      cache: true,\n      module: {\n        loaders: [\n          { test: /\\.js$/, loader: 'jsx-loader'}\n        ]\n      }\n    },\n    webpackServer: {\n      stats: {\n        colors: true\n      }\n    },\n    reporters: [ 'progress' ],\n    port: 9876,\n    colors: true,\n    autoWatch: true,\n    singleRun: true,\n    browsers: ['Firefox'], // 'PhantomJS','Chrome','Firefox','Safari'\n    captureTimeout: 60000,\n    plugins: [\n      require(\"karma-mocha\"),\n      require(\"karma-chai\"),\n      require(\"karma-chrome-launcher\"),\n      require(\"karma-firefox-launcher\"),\n      require(\"karma-webpack\")\n    ]\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-react-tokeninput/node_modules/react-tokeninput/lib/add-class.js":"'use strict';\n\nmodule.exports = addClass;\n\nfunction addClass(existing, added) {\n  if (!existing) return added;\n  if (existing.indexOf(added) > -1) return existing;\n  return existing + ' ' + added;\n}","/home/travis/build/npmtest/node-npmtest-react-tokeninput/node_modules/react-tokeninput/lib/main.js":"'use strict';\n\nvar React = require('react');\nvar Combobox = React.createFactory(require('./combobox'));\nvar Token = React.createFactory(require('./token'));\nvar classnames = require('classnames');\n\nvar ul = React.DOM.ul;\nvar li = React.DOM.li;\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n  propTypes: {\n    isLoading: React.PropTypes.bool,\n    loadingComponent: React.PropTypes.any,\n    onFocus: React.PropTypes.func,\n    onInput: React.PropTypes.func.isRequired,\n    onSelect: React.PropTypes.func.isRequired,\n    tokenAriaFunc: React.PropTypes.func,\n    onRemove: React.PropTypes.func.isRequired,\n    selected: React.PropTypes.array.isRequired,\n    menuContent: React.PropTypes.any,\n    showListOnFocus: React.PropTypes.bool,\n    placeholder: React.PropTypes.string\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      selectedToken: null\n    };\n  },\n\n  handleClick: function handleClick() {\n    // TODO: Expand combobox API for focus\n    this.refs['combo-li'].querySelector('input').focus();\n  },\n\n  handleFocus: function handleFocus() {\n    if (this.props.onFocus) {\n      this.props.onFocus();\n    }\n  },\n\n  handleInput: function handleInput(inputValue) {\n    this.props.onInput(inputValue);\n  },\n\n  handleSelect: function handleSelect(event, option) {\n    var input = this.refs['combo-li'].querySelector('input');\n    this.props.onSelect(event, option);\n    this.setState({\n      selectedToken: null\n    });\n    this.props.onInput(input.value);\n  },\n\n  handleRemove: function handleRemove(value) {\n    var input = this.refs['combo-li'].querySelector('input');\n    this.props.onRemove(value);\n    input.focus();\n  },\n\n  handleRemoveLast: function handleRemoveLast() {\n    this.props.onRemove(this.props.selected[this.props.selected.length - 1]);\n  },\n\n  render: function render() {\n    var isDisabled = this.props.isDisabled;\n    var tokens = this.props.selected.map(function (token) {\n      return Token({\n        tokenAriaFunc: this.props.tokenAriaFunc,\n        onFocus: this.handleFocus,\n        onRemove: this.handleRemove,\n        value: token,\n        name: token.name,\n        key: token.id });\n    }.bind(this));\n\n    var classes = classnames('ic-tokens flex', {\n      'ic-tokens-disabled': isDisabled\n    });\n\n    return ul({ className: classes, onClick: this.handleClick }, tokens, li({ className: 'inline-flex', ref: 'combo-li' }, Combobox({\n      id: this.props.id,\n      'aria-label': this.props['combobox-aria-label'],\n      ariaDisabled: isDisabled,\n      onFocus: this.handleFocus,\n      onInput: this.handleInput,\n      showListOnFocus: this.props.showListOnFocus,\n      onSelect: this.handleSelect,\n      onRemoveLast: this.handleRemoveLast,\n      value: this.state.selectedToken,\n      isDisabled: isDisabled,\n      placeholder: this.props.placeholder\n    }, this.props.menuContent)), this.props.isLoading && li({ className: 'ic-tokeninput-loading flex' }, this.props.loadingComponent));\n  }\n});","/home/travis/build/npmtest/node-npmtest-react-tokeninput/node_modules/react-tokeninput/lib/option.js":"'use strict';\n\nvar React = require('react');\nvar addClass = require('./add-class');\nvar div = React.createFactory('div');\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n\n  propTypes: {\n\n    /**\n     * The value that will be sent to the `onSelect` handler of the\n     * parent Combobox.\n    */\n    value: React.PropTypes.any.isRequired,\n\n    /**\n     * What value to put into the input element when this option is\n     * selected, defaults to its children coerced to a string.\n    */\n    label: React.PropTypes.string\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      role: 'option',\n      tabIndex: '-1',\n      className: 'ic-tokeninput-option',\n      isSelected: false\n    };\n  },\n\n  render: function render() {\n    var props = this.props;\n    if (props.isSelected) {\n      props.className = addClass(props.className, 'ic-tokeninput-selected');\n      props.ariaSelected = true;\n    }\n    return div(props);\n  }\n\n});","/home/travis/build/npmtest/node-npmtest-react-tokeninput/node_modules/react-tokeninput/lib/token.js":"'use strict';\n\nvar React = require('react');\nvar span = React.DOM.span;\nvar li = React.createFactory('li');\n\nmodule.exports = React.createClass({\n  displayName: 'exports',\n\n  handleClick: function handleClick() {\n    this.props.onRemove(this.props.value);\n  },\n\n  handleKeyDown: function handleKeyDown(key) {\n    var enterKey = 13;\n    if (key.keyCode === enterKey) this.props.onRemove(this.props.value);\n  },\n\n  ariaLabelRemove: function ariaLabelRemove() {\n    return this.props.tokenAriaFunc ? this.props.tokenAriaFunc(this.props.name) : 'Remove \\'' + this.props.name + '\\'';\n  },\n\n  render: function render() {\n    return li({\n      className: \"ic-token inline-flex\"\n    }, span({ className: \"ic-token-label\" }, this.props.name), span({\n      role: 'button',\n      onClick: this.handleClick,\n      onFocus: this.props.onFocus,\n      onKeyDown: this.handleKeyDown,\n      'aria-label': this.ariaLabelRemove(),\n      className: \"ic-token-delete-button\",\n      tabIndex: 0\n    }, \"✕\"));\n  }\n});"}